[pytest]
addopts = -x
markers = 
    mark_name: description


; ---------------- <My Policy> Always open: 
; ----Log File----                   record everything (DEBUG), but just as Archive most time
; ----------------
; by default is 'w' mode (no 'a' mode in pytest api...?)

log_file = ./pytest.log
log_file_level = debug
;   ^
;   |
; log_file_level = warning

log_file_date_format = %Y-%m-%d %H:%M:%S
; log_file_format = %(asctime)s [%(levelname)8s] %(filename)50s->%(funcName)50s(): %(lineno)4s: %(message)s
log_file_format = [%(levelname)8s] : %(message)s


; --------------------- <My Policy> 
; ----Live log call----     Seldom use for Debugging. Because we just focus on the Single Failed Test.
; ----             ----     But it can be openned for Tracing <PASSED> Code.
; ---------------------     (Quick Overview of major state changes in the Flows and Important Information INFO)

; log_cli = true

; log_cli_level = debug
;   ^
;   |
; log_cli_level = info
;   ^
;   |
; log_level = warning

; log_cli_format = [%(levelname)8s] %(filename)50s->%(funcName)50s(): %(lineno)4s: %(message)s


; ------------------------- <My Policy> Always open: 
; ----                 ----                   capture Exception when Test <FAILED>, for quickly debug
; ----                 ----               During debugging:
; ----                 ----                   decide the log_level = (few trace) WARNING -> (basic) INFO -> (more trace) DEBUG
; ----Captured log call----                       (so that comprehending the flow & positioning current state faster)
; ----                 ----                   use Debugger (Breakpoint+Watch)
; ----                 ----                       or (if no Debugger) temporarily put diagnostic variable in DEBUG
; ----                 ----               After finish debugging: 
; -------------------------                   archiving diagnostic variables into DEBUG/(TRACE) or directly delete them
; by defauct is "DEBUG" level
; In test_xxx() or @pytest.fixture, we can further control the level of captured log messages using the "caplog fixture".
;     ( Better use @pytest.fixture(scope="function", autouse=True) + yield to replace setup() and teardown() )
; => caplog.set_level(logging.LEVEL)

log_date_format = %Y-%m-%d %H:%M:%S
; log_format = [%(levelname)8s] %(filename)50s->%(funcName)50s(): %(lineno)4s: %(message)s
log_format = [%(levelname)8s] : %(message)s
